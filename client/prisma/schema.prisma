// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  members          Member[]
  organizations    Organization[]
  projects         Project[]
  conversationsOne Conversation[] @relation(name: "userOne")
  conversationsTwo Conversation[] @relation(name: "userTwo")
  messages         Message[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Organization {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  logo      String?
  ownerId   String    @db.ObjectId
  projects  Project[]
  members   Member[]
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  ownerId        String       @db.ObjectId
  owner          User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members        Member[]
  organizationId String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Member {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  isActive        Boolean       @default(false)
  hasNotification Boolean       @default(false)
  lastSeen        DateTime      @default(now())
  projectId       String?       @db.ObjectId
  project         Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  orgId           String?       @db.ObjectId
  org             Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model InviteToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  createdAt DateTime @default(now())
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userOneId String    @db.ObjectId
  userOne   User      @relation(name: "userOne", fields: [userOneId], references: [id], onDelete: Cascade)
  userTwoId String    @db.ObjectId
  userTwo   User      @relation(name: "userTwo", fields: [userTwoId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  text           String
  imageUrl       String?
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}


model Notification {
    id             String       @id @default(auto()) @map("_id") @db.ObjectId
    type String?
    content String
    senderName String
    senderImage String
    receiverId  String? @db.ObjectId
    projectId   String @db.ObjectId
    createdAt DateTime @default(now())
}